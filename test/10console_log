#!/usr/bin/env rspec
# -*- mode: ruby -*-

$LOAD_PATH.unshift '/opt/pptools'
require 'ppenv'

require 'pcm_spec_helper'
require 'pcm'

Fog.mock!
PPInventory.mock!

describe PCM do
    before(:all) { setup_fixture }
    after(:all) { cleanup_fixture }

    before :all do
        $logger = LogCatcher.new
        $pcm = PCM.new('test/data/etc')
    end

    describe "#api_url" do

        context "with no configured v2api" do
            specify { $pcm.api_url.should == 'http://localhost/pcm_api/v2' }
        end

        context "with configured v2api" do

            it "returns configured v2api" do
                $pcm.config['services']['v2api'] = 'http://api.host/pcm_api/v2'
                $pcm.api_url.should == 'http://api.host/pcm_api/v2'
            end

        end

    end

end

describe PCM::Instance do
    before(:all) { setup_fixture }
    after(:all) { cleanup_fixture }

    describe ".new" do

        it "sets console_log" do
            instance = PCM::Instance.new($pcm, 'console_log' => 'testvalue')
            instance.console_log.should == 'testvalue'
        end

    end

    describe "#set_without_validation" do

        it "sets console_log" do
            instance = PCM::Instance.new($pcm)
            instance.set_without_validation(:console_log => 'testvalue')
            instance.console_log.should == 'testvalue'
        end

    end

    describe "#console_log=" do

        it "sets console_log" do
            instance = PCM::Instance.new($pcm)
            instance.console_log = 'testvalue'
            instance.console_log.should == 'testvalue'
        end

    end


end

describe PCM::Connection do
    before(:all) { setup_fixture }
    after(:all) { cleanup_fixture }

    before :all do
        $req = { 'size' => 'm1.medium', 'image' => 'centos5.6' }
        $pcm.clouds('awscloud').
            fog.register_image('testimg', 'testimg', '/dev/sda0')
        $pcm.config[:clouds]['awscloud']['images'] =
            { 'centos5.6' => $pcm.clouds('awscloud').fog.images.first.id }
    end

    context "in AWS" do

        before :each do
            $pcm.clouds('awscloud').fog.servers.each { |s| s.destroy }
            $instance = $pcm.clouds('awscloud').create_instance($req)
            $pcm.clouds('awscloud').fog.servers.get($instance.id).
                wait_for { ready? }
        end

        describe "#console_log" do

            it "returns the instance console log" do
                logtext = $pcm.clouds('awscloud').console_log($instance.id)
                logtext.should_not be_nil
            end

        end

    end

end
